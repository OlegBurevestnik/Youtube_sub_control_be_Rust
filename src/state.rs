use std::collections::HashMap;
use std::sync::{Arc, RwLock};
use std::time::{Duration, Instant};
use serde_json::Value;

#[derive(Clone)]
pub struct AppState {
    // –¢–≤–æ–π —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω (–º–æ–∂–µ—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—à—å —á–µ—Ä–µ–∑ cookie)
    pub access_token: Arc<RwLock<Option<String>>>,
    // –ö—ç—à YouTube pageToken‚Äô–æ–≤ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (MVP: –∫–ª—é—á–æ–º –±—É–¥–µ—Ç access_token)
    // tokens[user][0] = None (—Å—Ç—Ä.1), tokens[user][1] = Some(token –¥–ª—è —Å—Ç—Ä.2), ...
    pub page_tokens: Arc<RwLock<HashMap<String, Vec<Option<String>>>>>,
    // üîπ –ö—ç—à —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (–ø–æ—Å–ª–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞)
    // –ö–ª—é—á: –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "subs::user={access_token}:q={query}")
    pub subs_cache: Arc<RwLock<HashMap<String, CacheEntry>>>,
}

// –ó–∞–ø–∏—Å—å –≤ –∫—ç—à–µ: –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞–Ω–æ + –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ items
pub struct CacheEntry {
    pub created_at: Instant,
    pub items: Vec<Value>,
}

impl AppState {
    pub fn new() -> Self {
        Self {
            access_token: Arc::new(RwLock::new(None)),
            page_tokens: Arc::new(RwLock::new(HashMap::new())),
            subs_cache: Arc::new(RwLock::new(HashMap::new())),
        }
    }

    // ---- –†–∞–±–æ—Ç–∞ —Å access_token (–∫–∞–∫ –±—ã–ª–æ) ----
    pub fn set_token(&self, token: String) {
        let mut lock = self.access_token.write().unwrap();
        *lock = Some(token);
    }

    pub fn get_token(&self) -> Option<String> {
        let lock = self.access_token.read().unwrap();
        lock.clone()
    }

    // ---- –•–µ–ª–ø–µ—Ä—ã –¥–ª—è page_tokens (–∫–∞–∫ –±—ã–ª–æ) ----

    /// –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –¥–ª—è user_key –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Ü–µ–ø–æ—á–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ (—Å—Ç—Ä.1 = None).
    pub fn ensure_user_tokens_init(&self, user_key: &str) {
        let mut map = self.page_tokens.write().unwrap();
        map.entry(user_key.to_string()).or_insert_with(|| vec![None]); // —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1
    }

    /// –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–ª–∏–Ω—É —Ü–µ–ø–æ—á–∫–∏ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω.
    pub fn tokens_len_and_last(&self, user_key: &str) -> (usize, Option<String>) {
        let map = self.page_tokens.read().unwrap();
        match map.get(user_key) {
            Some(vec) => (vec.len(), vec.last().cloned().flatten()),
            None => (0, None),
        }
    }

    /// –ü–æ–ª—É—á–∏—Ç—å pageToken –¥–ª—è YT-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (1..): None –¥–ª—è 1-–π, Some(..) –¥–ª—è 2+,
    /// –µ—Å–ª–∏ —É–∂–µ –∏–∑–≤–µ—Å—Ç–µ–Ω.
    pub fn get_token_for_page(&self, user_key: &str, yt_page: usize) -> Option<Option<String>> {
        let map = self.page_tokens.read().unwrap();
        map.get(user_key).and_then(|v| v.get(yt_page - 1)).cloned()
    }

    /// –î–æ–±–∞–≤–∏—Ç—å nextPageToken –≤ —Ü–µ–ø–æ—á–∫—É (—Ç.–µ. —Å–¥–µ–ª–∞—Ç—å –∏–∑–≤–µ—Å—Ç–Ω–æ–π —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É).
    pub fn push_next_token(&self, user_key: &str, next: Option<String>) {
        let mut map = self.page_tokens.write().unwrap();
        let entry = map.entry(user_key.to_string()).or_insert_with(|| vec![None]);
        entry.push(next);
    }

    // ---- –ö—ç—à –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ/–æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ ----

    /// –ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Ç—É—Ö –ø–æ TTL). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ø–∏—é items.
    pub fn subs_cache_get(&self, key: &str, ttl: Duration) -> Option<Vec<Value>> {
        let mut map = self.subs_cache.write().unwrap();
        if let Some(entry) = map.get(key) {
            if entry.created_at.elapsed() < ttl {
                return Some(entry.items.clone());
            } else {
                // –∏—Å—Ç—ë–∫ TTL ‚Äî —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å
                map.remove(key);
            }
        }
        None
    }

    /// –ü–æ–ª–æ–∂–∏—Ç—å –≤ –∫—ç—à –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ items.
    pub fn subs_cache_put(&self, key: String, items: Vec<Value>) {
        let mut map = self.subs_cache.write().unwrap();
        map.insert(
            key,
            CacheEntry {
                created_at: Instant::now(),
                items,
            },
        );
    }

    /// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∫—ç—à–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏)
    pub fn subs_cache_invalidate(&self, key: &str) {
        let mut map = self.subs_cache.write().unwrap();
        map.remove(key);
    }

    /// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø–æ–¥–ø–∏—Å–æ–∫
    pub fn subs_cache_clear(&self) {
        let mut map = self.subs_cache.write().unwrap();
        map.clear();
    }
}
